import "package:dio/dio.dart" as dio_http;
import '../model/station_model.dart';

class StationData {
  final String stationUrl = 'https://hubeau.eaufrance.fr/api/v1/etat_piscicole/stations';
  final String prelevementUrl = 'https://hubeau.eaufrance.fr/api/v1/etat_piscicole/indicateurs';

  final dio_http.Dio dio = dio_http.Dio();

  Future<List<Prelevement>> fetchAllPrelevements() async {
    print('üîç D√©but de la r√©cup√©ration des pr√©l√®vements...allPrelevement');
    List<Prelevement> allPrelevements = [];
    int page = 1;
    int limit = 10000; // Adapte cette valeur selon la doc de l'API
    bool hasMore = true;

    while (hasMore) {
      try {
        print('üì° Requ√™te API allPrelevement- Page $page');
        final response = await dio.get('$prelevementUrl?page=$page&size=$limit');//&date_operation_min=2024-01-01

        if (response.statusCode != 200 && response.statusCode != 206) {
          print('‚ùå Erreur API allPrelevement - Code : ${response.statusCode}');
          break;
        }

        List<dynamic> data = response.data['data'];
        print('‚úÖ ${data.length} pr√©l√®vements r√©cup√©r√©s sur la page $page');
        if (data.isEmpty) {
          hasMore = false; // On arr√™te si plus de r√©sultats
        } else {
          allPrelevements.addAll(data.map((json) => Prelevement.fromJson(json)));
          page++; // On passe √† la page suivante
        }
      } catch (e) {

        print('‚ùå allPrelevement Exception lors de la r√©cup√©ration des pr√©l√®vements : $e');

        break;
      }
    }

    print('Total pr√©l√®vements r√©cup√©r√©s : ${allPrelevements.length}');
    return allPrelevements;
  }












  Future<List<StationModel>> fetchStationsOnly() async {
    print('üîç D√©but de la r√©cup√©ration des stations...');

    List<StationModel> allStations = [];
    int page = 1;
    int limit = 16000;
    bool hasMore = true;

    while (hasMore) {
      try {
        print('üì° Requ√™te API stations - Page $page');
        final response = await dio.get('$stationUrl?page=$page&size=$limit');

        if (response.statusCode != 200 && response.statusCode != 206) {
          print('‚ùå Erreur API stations - Code : ${response.statusCode}');
          break;
        }

        List<dynamic> data = response.data['data'];
        print('‚úÖ ${data.length} stations r√©cup√©r√©es sur la page $page');

        if (data.isEmpty) {
          hasMore = false;
        } else {
          allStations.addAll(data.map((json) => StationModel.fromJson(json)));
          page++;
        }
      } catch (e) {
        print('‚ùå Exception lors de la r√©cup√©ration des stations : $e');
        break;
      }
    }

    print('üéØ Total stations r√©cup√©r√©es : ${allStations.length}');
    return allStations;
  }


}
